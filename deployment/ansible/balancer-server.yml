- hosts: balancer_server
  vars:
    certificate_access_token: "{{ lookup('env', 'CERTIFICATE_ACCESS_TOKEN') }}"
    dns_control_key: "{{ lookup('env', 'DNS_CONTROL_KEY') }}"
  become: yes
  tasks:
  # miscellaneous
  - name: "include variables"
    include_vars:
      file: ../tf_variables.yml
  - name: "apt-get update"
    apt:
      update_cache: yes
      cache_valid_time: 3600
  - name: "install nginx and passlib"
    apt:
      name: ['nginx', 'python3-passlib']
      state: latest

  # setup ssl
  - name: "download fullchain"
    uri:
      url: "https://omniskop.de/node-red/devops/cert/fullchain.pem"
      method: POST
      body: "{{ certificate_access_token }}"
      dest: "/etc/nginx/fullchain.pem"
      creates: "/etc/nginx/fullchain.pem" # don't run if this file exists
      mode: 0600
      follow_redirects: all
      headers: {"Content-Type": "text/plain"}
  - name: "download fullchain"
    uri:
      url: "https://omniskop.de/node-red/devops/cert/privkey.pem"
      method: POST
      body: "{{ certificate_access_token }}"
      dest: "/etc/nginx/privkey.pem"
      creates: "/etc/nginx/privkey.pem" # don't run if this file exists
      mode: 0600
      follow_redirects: all
      headers: {"Content-Type": "text/plain"}
  - name: "download dhparam"
    get_url:
      url: "https://ssl-config.mozilla.org/ffdhe2048.txt"
      dest: "/etc/nginx/dhparam"
  
  # copy configurations
  - name: "configure prometheus auth"
    community.general.htpasswd:
      path: "/etc/nginx/prometheus_auth"
      name: "prometheus"
      password: "{{ lookup('env', 'PROMETHEUS_PASSWORD') }}"
      owner: root
      group: www-data
      mode: 0640
  - name: "copy server balancer config"
    template:
      src: balancer-server.nginx.conf
      dest: /etc/nginx/sites-available/balancer-server.conf
  - name: "enable server balancer config"
    file:
      src: "/etc/nginx/sites-available/balancer-server.conf"
      dest: "/etc/nginx/sites-enabled/balancer-server.conf"
      state: link
  - name: "copy ssl config"
    template:
      src: ssl.nginx.conf
      dest: /etc/nginx/ssl.conf
  - name: "disable default config"
    file:
      path: /etc/nginx/sites-enabled/default
      state: absent

  # start server
  - name: "start nginx"
    service:
      name: nginx
      state: started
  - name: "reload nginx config"
    command:
      cmd: "nginx -s reload"
  - name: "update dns entry"
    uri:
      url: "https://omniskop.de/node-red/devops/dns"
      method: POST
      body: {key: "{{ dns_control_key }}", ip: "{{ balancer_server_ip_address }}", environment: "{{ deploy_env }}"}
      body_format: json
      follow_redirects: all
      headers: {"Content-Type": "application/json"}

  - name: "install prometheus"
    get_url:
      url: "https://github.com/prometheus/prometheus/releases/download/v2.29.2/prometheus-2.29.2.linux-amd64.tar.gz"
      dest: /opt/prometheus.tar.gz
  - name: "extract prometheus"
    unarchive:
      src: /opt/prometheus.tar.gz
      dest: /opt
      remote_src: yes
  - name: "copy prometheus executable"
    copy:
      src: /opt/prometheus-2.29.2.linux-amd64/prometheus
      dest: /usr/bin/prometheus
      remote_src: yes
      mode: u=rwx,g=rx,o=rx
  - name: "copy prometheus config"
    template:
      src: prometheus-accumulator.yml
      dest: /opt/prometheus-accumulator.yml
  - name: "install prometheus service"
    template:
      src: prometheus.service
      dest: /etc/systemd/system/prometheus.service
  - name: "start prometheus service"
    service:
      name: prometheus
      daemon_reload: yes
      enabled: true
      state: started

  - name: "install promtail"
    vars:
      promtail_service: "balancer-server"
    include: tasks/promtail.yml
    become: yes

  - name: "install nginx prometheus exporter"
    include: tasks/nginx-exporter.yml